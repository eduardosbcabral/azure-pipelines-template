parameters:
- name: staging_tag

jobs:
- job: 'CheckBuildVersion'
  displayName: 'Check build version' 
  variables: 
    current_counter: $[counter(variables['Build.SourceBranchName'], 1)]   
  steps:
  # In these steps we do not need to checkout the code
  - checkout: none
  # It will update the pipeline build version based on the reason of the trigger.
  # If it is a tag trigger, it will set the build version as the git tag version.
  - bash: |
      if [[ "$(Build.SourceVersionMessage)" =~ "hotfix/" ]];
      then 
        echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]true" 
        echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]hotfix"
      else
        echo "##vso[task.setvariable variable=IsHotfix;isOutput=true]false"
        echo "##vso[task.setvariable variable=PreviousPrefix;isOutput=true]release"
      fi
      if [[ "$(Build.SourceBranch)" =~ "/hotfix/" ]] ||
        [[ "$(Build.SourceBranch)" =~ "/release/" ]]; 
      then
        version=`sed 's/v//g' <<< $BUILD_SOURCEBRANCHNAME`
        echo "Generate Preview Release Version"
        echo "Version: $version"
        echo "         $version-preview.$(current_counter)"
        echo "##vso[task.setvariable variable=DeployType;isOutput=true]staging"
        echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]true"
        echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]true"
        echo "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version-preview.$(current_counter)"
        echo "##vso[build.updatebuildnumber]$version-preview.$(current_counter)"
      elif [[ "$(Build.SourceBranch)" =~ "/tags/" ]];
      then
        version=`sed 's/v//g' <<< $BUILD_SOURCEBRANCHNAME`
        echo "Generate Release Version"
        echo "Version: $version"
        echo "##vso[task.setvariable variable=DeployType;isOutput=true]production"
        echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]true"
        echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]true"
        echo "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version"
        echo "##vso[build.updatebuildnumber]$version"
      else
        echo "Generate Development Version"
        staging_tag=`echo "${{ parameters.STAGING_TAG }}" | xargs`
        if [[ -z "$staging_tag" ]]
        then
          version=`echo "$BUILD_SOURCEVERSIONMESSAGE" | grep -oP '[\[]staging v?\d+.\d+.\d+[\]]' | grep -oP '\d+.\d+.\d+'`
        else
          version=`echo "$staging_tag" | grep -oP '\d+.\d+.\d+'`
        fi
        if [[ -z "$version" ]];
        then
          echo "Version: $(Build.BuildNumber)"
          echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]false"
          echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]false"
        else
          echo "Version: $version-alpha.$(Build.BuildNumber)"
          echo "Force staging enabled!"
          echo "##vso[task.setvariable variable=DeployType;isOutput=true]staging"
          echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]true"
          echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]true"
          echo "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version-alpha.$(Build.BuildNumber)"
          echo "##vso[build.updatebuildnumber]$version-alpha.$(Build.BuildNumber)"
        fi
      fi
    displayName: 'Update Version Number'
    name: UpdateBuildVersionNumberTask
  # Get the previous build status and check if the returned XML from curl request
  # has a string 'succeeded' and if it is not ok, it will stop the execution of current build 
  # It will execute it just when the trigger is a tag.
  # It is necessary in the gitflow workflow, because it ensures that we had either a
  # release or hotfix branch before the deployment
  - bash: |
      STAGING_URL="$(System.CollectionUri)/$(System.TeamProject)/_apis/build/status/$(System.DefinitionId)?branchName=$(UpdateBuildVersionNumberTask.PreviousPrefix)/$(Build.BuildNumber)&stageName=Deploy%20-%20Staging"
      STAGING_RESULT=$`curl --silent $STAGING_URL`
      echo "URL: $STAGING_URL" 
      echo "RESULT: $STAGING_RESULT"
      SUCCEEDED=$`echo $STAGING_RESULT | grep -P 'succeeded' -o | head -n 1`
      if [[ "$STAGING_RESULT" =~ "succeeded" ]];
      then
          echo "$(UpdateBuildVersionNumberTask.PreviousPrefix) branch is ok!"
      else
          echo "$(UpdateBuildVersionNumberTask.PreviousPrefix) branch is not ok!"
          exit 1
      fi
    condition: contains(variables['Build.SourceBranch'], '/tags/')
    displayName: 'Break if release branch does not succeeded'
    name: BreakIsReleaseNotPassing
  - bash: env
    displayName: Show environment variables