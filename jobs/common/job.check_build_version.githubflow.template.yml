parameters:
- name: staging_tag

jobs:
- job: 'CheckBuildVersion'
  displayName: 'Check build version' 
  steps:
  # In these steps we do not need to checkout the code
  - checkout: none
  # It will update the pipeline build version based on the reason of the trigger.
  # If it is a tag trigger, it will set the build version as the git tag version.
  - bash: |
      if [[ "$(Build.SourceBranch)" =~ "/tags/" ]];
      then
        version=`sed 's/v//g' <<< $BUILD_SOURCEBRANCHNAME`
        echo "Generate Release Version"
        echo "Version: $version"
        echo "##vso[task.setvariable variable=DeployType;isOutput=true]production"
        echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]true"
        echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]true"
        echo "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version"
        echo "##vso[build.updatebuildnumber]$version"
      else
        echo "Generate Development Version"
        staging_tag=`echo "${{ parameters.STAGING_TAG }}" | xargs`
        if [[ -z "$staging_tag" ]]
        then
          version=`echo "$BUILD_SOURCEVERSIONMESSAGE" | grep -oP '[\[]staging v?\d+.\d+.\d+[\]]' | grep -oP '\d+.\d+.\d+'`
        else
          version=`echo "$staging_tag" | grep -oP '\d+.\d+.\d+'`
        fi
        if [[ -z "$version" ]];
        then
          echo "Version: $(Build.BuildNumber)"
          echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]false"
          echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]false"
        else
          echo "Version: $version-alpha.$(Build.BuildNumber)"
          echo "Force staging enabled!"
          echo "##vso[task.setvariable variable=DeployType;isOutput=true]staging"
          echo "##vso[task.setvariable variable=PublishDockerImage;isOutput=true]true"
          echo "##vso[task.setvariable variable=PackingNuget;isOutput=true]true"
          echo "##vso[task.setvariable variable=PackageVersion;isOutput=true]$version-alpha.$(Build.BuildNumber)"
          echo "##vso[build.updatebuildnumber]$version-alpha.$(Build.BuildNumber)"
        fi
      fi
    displayName: 'Update Version Number'
    name: UpdateBuildVersionNumberTask
  - bash: env
    displayName: Show environment variables